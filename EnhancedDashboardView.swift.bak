import SwiftUI

struct EnhancedDashboardView: View {
    @StateObject private var viewModel = DashboardViewModel()
    @EnvironmentObject private var revenueCatManager: RevenueCatManager
    
    var body: some View {
        NavigationView {
            ZStack {
                // Background using our design system
                PiggyGradients.background
                    .ignoresSafeArea()
                
                if viewModel.isLoading && viewModel.dashboardData == nil {
                    LoadingView()
                } else if let error = viewModel.errorMessage, viewModel.showError {
                    ErrorView(message: error) {
                        viewModel.retryLoadData()
                    }
                } else if let dashboardData = viewModel.dashboardData {
                    DashboardContent(
                        data: dashboardData,
                        viewModel: viewModel,
                        isRefreshing: viewModel.isRefreshing
                    )
                }
            }
            .navigationBarHidden(true)
        }
        .onAppear {
            if viewModel.dashboardData == nil {
                viewModel.loadDashboardData()
            }
        }
    }
}

// MARK: - Dashboard Content
struct DashboardContent: View {
    let data: DashboardData
    @ObservedObject var viewModel: DashboardViewModel
    let isRefreshing: Bool
    
    var body: some View {
        ScrollView {
            LazyVStack(spacing: PiggySpacing.xl) {
                // Header Section
                DashboardHeader(
                    user: data.user,
                    activeGoalsCount: viewModel.activeGoalsCount
                )
                .padding(.horizontal, PiggySpacing.lg)
                .padding(.top, PiggySpacing.md)
                
                // High Priority Insights Alert
                if !viewModel.highPriorityInsights.isEmpty {
                    ForEach(viewModel.highPriorityInsights) { insight in
                        InsightBanner(insight: insight) {
                            viewModel.dismissInsight(insight)
                        }
                        .padding(.horizontal, PiggySpacing.lg)
                    }
                }
                
                // Active Goals Section
                if viewModel.hasActiveGoals {
                    GoalsSection(
                        primaryGoal: viewModel.primaryGoal,
                        secondaryGoals: viewModel.secondaryGoals,
                        onAddMoney: { goal, amount in
                            viewModel.addMoneyToGoal(goal, amount: amount)
                        }
                    )
                } else {
                    EmptyGoalsState()
                        .padding(.horizontal, PiggySpacing.lg)
                }
                
                // Quick Actions
                QuickActionsSection { action in
                    handleQuickAction(action)
                }
                .padding(.horizontal, PiggySpacing.lg)
                
                // Premium Banner
                PremiumBanner()
                    .padding(.horizontal, PiggySpacing.lg)
                
                // AI Concierge Section (Premium Feature)
                PremiumGate(requiresPremium: true) {
                    AIConciergeCard()
                        .padding(.horizontal, PiggySpacing.lg)
                }
                
                // Month Summary
                MonthSummaryCard(summary: data.monthSummary)
                    .padding(.horizontal, PiggySpacing.lg)
                
                // Recent Activity
                if viewModel.hasRecentTransactions {
                    RecentActivitySection(transactions: data.recentTransactions)
                        .padding(.horizontal, PiggySpacing.lg)
                } else {
                    EmptyTransactionsState()
                        .padding(.horizontal, PiggySpacing.lg)
                }
                
                // Artist Tracking Section
                ArtistTrackingSection()
                    .padding(.horizontal, PiggySpacing.lg)
                
                // Bottom padding for safe area
                Spacer(minLength: PiggySpacing.xl)
            }
        }
        .refreshable {
            viewModel.refreshData()
        }
    }
    
    private func handleQuickAction(_ action: QuickAction) {
        // Check if action requires premium and user doesn't have it
        switch action {
        case .aiSuggestions:
            if !revenueCatManager.canAccessAIConcierge {
                showPaywall = true
                return
            }
        case .addArtist:
            if viewModel.artistCount >= revenueCatManager.artistTrackingLimit {
                showPaywall = true
                return
            }
        default:
            break
        }
        
        // Handle quick action implementation
        switch action {
        case .addPurchase:
            // TODO: Navigate to add purchase
            break
        case .addSavings:
            viewModel.addSavings(amount: 50.0) // Default amount
        case .viewGoals:
            // TODO: Navigate to goals view
            break
        case .viewInsights:
            // TODO: Navigate to insights view
            break
        case .aiSuggestions:
            // TODO: Navigate to AI suggestions
            break
        case .addArtist:
            // TODO: Navigate to add artist
            break
        }
    }
}

// MARK: - Dashboard Header
struct DashboardHeader: View {
    let user: DashboardUser
    let activeGoalsCount: Int
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: PiggySpacing.xs) {
                Text("Hello, \(user.name)! ðŸ‘‹")
                    .font(PiggyFont.title1)  // 28pt bold for main greeting
                    .foregroundColor(.piggyTextPrimary)
                
                if activeGoalsCount > 0 {
                    Text("\(activeGoalsCount) active goals")
                        .font(PiggyFont.caption1)
                        .foregroundColor(.piggyTextSecondary)
                } else {
                    Text("Ready to set some goals?")
                        .font(PiggyFont.caption1)
                        .foregroundColor(.piggyTextSecondary)
                }
            }
            
            Spacer()
            
            // Total Saved Badge
            VStack(alignment: .trailing, spacing: PiggySpacing.xs) {
                Text("Total Saved")
                    .font(PiggyFont.caption2)
                    .foregroundColor(.piggyTextSecondary)
                
                Text(user.formattedTotalSaved)
                    .font(PiggyFont.title3)
                    .fontWeight(.bold)
                    .foregroundColor(.piggyPrimary)
            }
            .padding(PiggySpacing.sm)
            .background(Color.piggySurface)
            .cornerRadius(PiggyBorderRadius.md)
        }
    }
}

// MARK: - Supporting Types
enum QuickAction {
    case addPurchase
    case addSavings
    case viewGoals
    case viewInsights
    case aiSuggestions
    case addArtist
}

// MARK: - Premium Components

struct AIConciergeCard: View {
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Image(systemName: "brain.head.profile")
                    .font(.system(size: 24))
                    .foregroundColor(.purple)
                
                VStack(alignment: .leading, spacing: 4) {
                    Text("AI Fan Concierge")
                        .font(PiggyFont.headline)
                        .foregroundColor(.piggyTextPrimary)
                    
                    Text("Personalized K-pop recommendations")
                        .font(PiggyFont.caption1)
                        .foregroundColor(.piggyTextSecondary)
                }
                
                Spacer()
                
                Text("NEW")
                    .font(PiggyFont.caption2)
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.pink)
                    .cornerRadius(12)
            }
            
            Text("âœ¨ BTS comeback alert: New album expected Q4 2025")
                .font(PiggyFont.body)
                .foregroundColor(.piggyTextPrimary)
                .padding()
                .background(Color.purple.opacity(0.1))
                .cornerRadius(12)
        }
        .padding()
        .background(Color.piggySurface)
        .cornerRadius(PiggyBorderRadius.lg)
    }
}

struct ArtistTrackingSection: View {
    @EnvironmentObject private var revenueCatManager: RevenueCatManager
    @State private var showPaywall = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("Artist Tracking")
                    .font(PiggyFont.headline)
                    .foregroundColor(.piggyTextPrimary)
                
                Spacer()
                
                Text("\(mockArtistCount)/\(revenueCatManager.artistTrackingLimit == Int.max ? "âˆž" : String(revenueCatManager.artistTrackingLimit))")
                    .font(PiggyFont.caption1)
                    .foregroundColor(.piggyTextSecondary)
            }
            
            // Mock artist cards
            VStack(spacing: 12) {
                ArtistCard(name: "BTS", nextEvent: "World Tour 2025", isTracking: true)
                ArtistCard(name: "BLACKPINK", nextEvent: "New Album", isTracking: true)
                
                // Show limit reached for free users
                if !revenueCatManager.canTrackUnlimitedArtists {
                    Button(action: { showPaywall = true }) {
                        HStack {
                            Image(systemName: "plus.circle.fill")
                                .foregroundColor(.gray)
                            Text("Add more artists (Premium)")
                                .font(PiggyFont.body)
                                .foregroundColor(.gray)
                            Spacer()
                            Image(systemName: "crown")
                                .foregroundColor(.gray)
                        }
                        .padding()
                        .background(Color.gray.opacity(0.1))
                        .cornerRadius(12)
                    }
                } else {
                    Button(action: {}) {
                        HStack {
                            Image(systemName: "plus.circle.fill")
                                .foregroundColor(.piggyPrimary)
                            Text("Add Artist")
                                .font(PiggyFont.body)
                                .foregroundColor(.piggyPrimary)
                            Spacer()
                        }
                        .padding()
                        .background(Color.piggyPrimary.opacity(0.1))
                        .cornerRadius(12)
                    }
                }
            }
        }
        .sheet(isPresented: $showPaywall) {
            EnhancedPaywallView()
        }
    }
    
    private var mockArtistCount: Int {
        return revenueCatManager.canTrackUnlimitedArtists ? 5 : 2
    }
}

struct ArtistCard: View {
    let name: String
    let nextEvent: String
    let isTracking: Bool
    
    var body: some View {
        HStack {
            Circle()
                .fill(Color.piggyPrimary)
                .frame(width: 40, height: 40)
                .overlay(
                    Text(String(name.prefix(1)))
                        .font(PiggyFont.headline)
                        .foregroundColor(.white)
                )
            
            VStack(alignment: .leading, spacing: 4) {
                Text(name)
                    .font(PiggyFont.body)
                    .fontWeight(.semibold)
                    .foregroundColor(.piggyTextPrimary)
                
                Text(nextEvent)
                    .font(PiggyFont.caption1)
                    .foregroundColor(.piggyTextSecondary)
            }
            
            Spacer()
            
            if isTracking {
                Image(systemName: "bell.fill")
                    .foregroundColor(.piggyPrimary)
                    .font(.system(size: 16))
            }
        }
        .padding()
        .background(Color.piggySurface)
        .cornerRadius(12)
    }
}

#Preview {
    EnhancedDashboardView()
        .environmentObject(RevenueCatManager.shared)
}