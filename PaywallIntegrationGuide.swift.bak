import SwiftUI
import RevenueCat

// MARK: - Integration Guide for PiggyBong Paywall
/*
 
 PAYWALL INTEGRATION GUIDE FOR PIGGYBONG
 =======================================
 
 This guide shows how to integrate the paywall system into your PiggyBong app.
 
 1. SETUP REVENUECAT
 ------------------
 
 Add to your App.swift or main entry point:
 
 ```swift
 @main
 struct PiggyBongApp: App {
     
     init() {
         // Configure RevenueCat
         Purchases.logLevel = .debug
         Purchases.configure(withAPIKey: "YOUR_REVENUECAT_PUBLIC_KEY")
     }
     
     var body: some Scene {
         WindowGroup {
             ContentView()
                 .environmentObject(RevenueCatManager.shared)
         }
     }
 }
 ```
 
 2. SETUP APP STORE CONNECT
 --------------------------
 
 Create these products in App Store Connect:
 - Product ID: "piggybong_premium_monthly"
 - Product ID: "piggybong_premium_yearly" (optional)
 
 3. CONFIGURE REVENUECAT DASHBOARD
 --------------------------------
 
 a) Create entitlement: "premium"
 b) Attach products to the entitlement
 c) Create offering: "default"
 d) Add packages to offering
 
 4. USAGE EXAMPLES
 ----------------
 
 See examples below for different integration patterns.
 
 */

// MARK: - Example 1: Show Paywall from Dashboard
struct DashboardView: View {
    @StateObject private var revenueCatManager = RevenueCatManager.shared
    @State private var showPaywall = false
    
    var body: some View {
        VStack {
            if !revenueCatManager.isSubscriptionActive {
                PremiumBanner()
                    .onTapGesture {
                        showPaywall = true
                    }
            }
            
            // Your dashboard content...
        }
        .sheet(isPresented: $showPaywall) {
            EnhancedPaywallView()
        }
    }
}

// MARK: - Example 2: Gated Premium Features
struct ArtistTrackingView: View {
    @StateObject private var revenueCatManager = RevenueCatManager.shared
    @State private var artists = ["BTS", "BLACKPINK"] // Free tier limit: 2
    
    var body: some View {
        VStack {
            ForEach(artists, id: \.self) { artist in
                ArtistCard(name: artist)
            }
            
            // Show add button or premium gate
            if artists.count < 2 || revenueCatManager.isSubscriptionActive {
                Button("Add Artist") {
                    // Add new artist
                }
            } else {
                PremiumGate(requiresPremium: true) {
                    Button("Add More Artists") {
                        // This won't show due to premium gate
                    }
                }
            }
        }
    }
}

// MARK: - Example 3: AI Concierge Feature
struct AIConciergeSuggestions: View {
    var body: some View {
        PremiumGate(requiresPremium: true) {
            VStack {
                Text("AI Recommendations")
                    .font(.headline)
                
                // Your AI concierge content
                Text("Based on your listening history...")
            }
        }
    }
}

// MARK: - Example 4: Settings Integration
struct SettingsView: View {
    @StateObject private var revenueCatManager = RevenueCatManager.shared
    @State private var showPaywall = false
    
    var body: some View {
        List {
            Section("Subscription") {
                if revenueCatManager.isSubscriptionActive {
                    HStack {
                        Text("Stan Plus Premium")
                        Spacer()
                        Text("Active")
                            .foregroundColor(.green)
                    }
                    
                    Button("Manage Subscription") {
                        // Open App Store subscription management
                        if let url = URL(string: "https://apps.apple.com/account/subscriptions") {
                            UIApplication.shared.open(url)
                        }
                    }
                } else {
                    Button("Upgrade to Premium") {
                        showPaywall = true
                    }
                    .foregroundColor(.purple)
                }
                
                Button("Restore Purchases") {
                    revenueCatManager.restorePurchases { success, error in
                        // Handle result
                    }
                }
            }
        }
        .sheet(isPresented: $showPaywall) {
            EnhancedPaywallView()
        }
    }
}

// MARK: - Example Components
struct ArtistCard: View {
    let name: String
    
    var body: some View {
        HStack {
            Circle()
                .fill(Color.purple.opacity(0.3))
                .frame(width: 40, height: 40)
                .overlay(
                    Text(String(name.prefix(2)))
                        .font(.caption.bold())
                )
            
            Text(name)
                .font(.headline)
            
            Spacer()
        }
        .padding()
        .background(Color.gray.opacity(0.1))
        .cornerRadius(12)
    }
}

// MARK: - Testing & Debug Tools
struct PaywallTestingView: View {
    @StateObject private var revenueCatManager = RevenueCatManager.shared
    @State private var showPaywall = false
    
    var body: some View {
        VStack(spacing: 20) {
            Text("Paywall Testing")
                .font(.title.bold())
            
            VStack(spacing: 12) {
                HStack {
                    Text("Subscription Status:")
                    Spacer()
                    Text(revenueCatManager.isSubscriptionActive ? "Active" : "Inactive")
                        .foregroundColor(revenueCatManager.isSubscriptionActive ? .green : .red)
                }
                
                if let customerInfo = revenueCatManager.customerInfo {
                    Text("Customer ID: \(customerInfo.originalAppUserId)")
                        .font(.caption)
                        .foregroundColor(.gray)
                }
            }
            
            Button("Show Paywall") {
                showPaywall = true
            }
            .buttonStyle(.borderedProminent)
            
            Button("Force Check Status") {
                revenueCatManager.checkSubscriptionStatus()
            }
            .buttonStyle(.bordered)
            
            // Debug: Simulate subscription states
            Group {
                Button("Simulate Active Subscription") {
                    revenueCatManager.isSubscriptionActive = true
                }
                .buttonStyle(.bordered)
                
                Button("Simulate Inactive Subscription") {
                    revenueCatManager.isSubscriptionActive = false
                }
                .buttonStyle(.bordered)
            }
        }
        .padding()
        .sheet(isPresented: $showPaywall) {
            EnhancedPaywallView()
        }
    }
}

// MARK: - Feature Flag System
class FeatureFlags: ObservableObject {
    @Published var useEnhancedPaywall = true
    @Published var enablePromoCode = true
    @Published var showPremiumBadges = true
    
    static let shared = FeatureFlags()
}

// MARK: - Analytics Integration Example
class PaywallAnalytics {
    static func trackPaywallShown(source: String) {
        // Track with your analytics service
        print("ðŸ“Š Paywall shown from: \(source)")
    }
    
    static func trackPurchaseAttempt() {
        print("ðŸ“Š Purchase attempt started")
    }
    
    static func trackPurchaseSuccess() {
        print("ðŸ“Š Purchase successful")
    }
    
    static func trackPurchaseCancelled() {
        print("ðŸ“Š Purchase cancelled")
    }
    
    static func trackPromoCodeUsed(_ code: String) {
        print("ðŸ“Š Promo code used: \(code)")
    }
}

// MARK: - Preview
#Preview("Dashboard Example") {
    DashboardView()
        .preferredColorScheme(.dark)
}

#Preview("Testing View") {
    PaywallTestingView()
        .preferredColorScheme(.dark)
}

#Preview("Settings Example") {
    SettingsView()
        .preferredColorScheme(.dark)
}