import SwiftUI
import Charts

// MARK: - Dashboard Demo View
struct DashboardDemo: View {\n    @StateObject private var orientationManager = DeviceOrientationManager()\n    @State private var selectedDemo: DemoSection = .overview\n    \n    enum DemoSection: String, CaseIterable {\n        case overview = \"Overview\"\n        case charts = \"Charts\"\n        case responsive = \"Responsive\"\n        case interactions = \"Interactions\"\n        \n        var icon: String {\n            switch self {\n            case .overview: return \"house.fill\"\n            case .charts: return \"chart.bar.fill\"\n            case .responsive: return \"iphone.and.ipad\"\n            case .interactions: return \"hand.tap.fill\"\n            }\n        }\n    }\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Demo section selector\n                sectionSelector\n                \n                // Demo content\n                TabView(selection: $selectedDemo) {\n                    overviewDemo\n                        .tag(DemoSection.overview)\n                    \n                    chartsDemo\n                        .tag(DemoSection.charts)\n                    \n                    responsiveDemo\n                        .tag(DemoSection.responsive)\n                    \n                    interactionsDemo\n                        .tag(DemoSection.interactions)\n                }\n                .tabViewStyle(.page(indexDisplayMode: .never))\n            }\n            .navigationTitle(\"Dashboard Demo\")\n            .navigationBarTitleDisplayMode(.inline)\n            .environment(\\.screenSize, orientationManager.screenSize)\n        }\n    }\n    \n    // MARK: - Section Selector\n    private var sectionSelector: some View {\n        ScrollView(.horizontal, showsIndicators: false) {\n            HStack(spacing: 16) {\n                ForEach(DemoSection.allCases, id: \\.self) { section in\n                    Button(action: {\n                        withAnimation(.easeInOut(duration: 0.3)) {\n                            selectedDemo = section\n                        }\n                    }) {\n                        VStack(spacing: 8) {\n                            Image(systemName: section.icon)\n                                .font(.title3)\n                                .foregroundColor(selectedDemo == section ? .white : .gray)\n                            \n                            Text(section.rawValue)\n                                .font(.caption)\n                                .foregroundColor(selectedDemo == section ? .white : .gray)\n                        }\n                        .frame(width: 80, height: 60)\n                        .background(\n                            RoundedRectangle(cornerRadius: 12)\n                                .fill(selectedDemo == section ? Color.piggyPrimary : Color.clear)\n                        )\n                    }\n                    .buttonStyle(PlainButtonStyle())\n                }\n            }\n            .padding(.horizontal, 20)\n        }\n        .padding(.vertical, 12)\n        .background(Color.gray.opacity(0.1))\n    }\n    \n    // MARK: - Overview Demo\n    private var overviewDemo: some View {\n        ScrollView {\n            LazyVStack(spacing: 20) {\n                // Header\n                headerSection\n                \n                // Feature highlights\n                featureHighlights\n                \n                // Sample dashboard preview\n                miniDashboardPreview\n                \n                // Statistics\n                statisticsSection\n            }\n            .padding(20)\n        }\n        .background(PiggyGradients.background)\n    }\n    \n    private var headerSection: some View {\n        VStack(spacing: 16) {\n            Image(systemName: \"chart.line.uptrend.xyaxis.circle.fill\")\n                .font(.system(size: 60))\n                .foregroundColor(.piggyPrimary)\n            \n            Text(\"Responsive Dashboard\")\n                .font(.largeTitle)\n                .fontWeight(.bold)\n                .foregroundColor(.white)\n            \n            Text(\"Interactive charts and insights for your K-pop fandom journey\")\n                .font(.body)\n                .foregroundColor(.white.opacity(0.8))\n                .multilineTextAlignment(.center)\n        }\n    }\n    \n    private var featureHighlights: some View {\n        LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 16) {\n            FeatureCard(\n                icon: \"chart.bar.fill\",\n                title: \"Interactive Charts\",\n                description: \"Tap and explore your spending data\",\n                color: .blue\n            )\n            \n            FeatureCard(\n                icon: \"iphone.and.ipad\",\n                title: \"Responsive Design\",\n                description: \"Optimized for all screen sizes\",\n                color: .green\n            )\n            \n            FeatureCard(\n                icon: \"wand.and.stars\",\n                title: \"Smart Insights\",\n                description: \"AI-powered recommendations\",\n                color: .purple\n            )\n            \n            FeatureCard(\n                icon: \"clock.fill\",\n                title: \"Real-time Updates\",\n                description: \"Live data synchronization\",\n                color: .orange\n            )\n        }\n    }\n    \n    private var miniDashboardPreview: some View {\n        VStack(alignment: .leading, spacing: 12) {\n            Text(\"Dashboard Preview\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            // Mini chart preview\n            Chart(sampleChartData) { item in\n                LineMark(\n                    x: .value(\"Date\", item.date),\n                    y: .value(\"Amount\", item.value)\n                )\n                .foregroundStyle(.blue)\n                .lineStyle(StrokeStyle(lineWidth: 2, lineCap: .round))\n                \n                AreaMark(\n                    x: .value(\"Date\", item.date),\n                    y: .value(\"Amount\", item.value)\n                )\n                .foregroundStyle(\n                    LinearGradient(\n                        colors: [.blue.opacity(0.3), .clear],\n                        startPoint: .top,\n                        endPoint: .bottom\n                    )\n                )\n            }\n            .frame(height: 100)\n            .chartXAxis(.hidden)\n            .chartYAxis(.hidden)\n            .background(Color.white.opacity(0.1))\n            .cornerRadius(8)\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    private var statisticsSection: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Dashboard Statistics\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 3), spacing: 12) {\n                StatCard(title: \"Chart Types\", value: \"6+\", icon: \"chart.bar\")\n                StatCard(title: \"Responsive Breakpoints\", value: \"4\", icon: \"iphone.and.ipad\")\n                StatCard(title: \"Interactive Elements\", value: \"12+\", icon: \"hand.tap\")\n            }\n        }\n    }\n    \n    // MARK: - Charts Demo\n    private var chartsDemo: some View {\n        ScrollView {\n            LazyVStack(spacing: 20) {\n                Text(\"Interactive Charts\")\n                    .font(.largeTitle)\n                    .fontWeight(.bold)\n                    .foregroundColor(.white)\n                    .frame(maxWidth: .infinity, alignment: .leading)\n                \n                // Line Chart Demo\n                InteractiveLineChart(\n                    data: sampleChartData,\n                    title: \"Spending Trend\",\n                    color: .blue,\n                    timeRange: .week\n                )\n                .responsiveCardStyle(for: orientationManager.screenSize)\n                \n                // Donut Chart Demo\n                InteractiveDonutChart(\n                    data: sampleCategoryData,\n                    title: \"Category Breakdown\",\n                    total: 300\n                )\n                .responsiveCardStyle(for: orientationManager.screenSize)\n                \n                // Bar Chart Demo\n                InteractiveBarChart(\n                    data: sampleGoalsData,\n                    title: \"Goal Progress\",\n                    color: .purple\n                )\n                .responsiveCardStyle(for: orientationManager.screenSize)\n                \n                // Sparkline demos\n                sparklineSection\n            }\n            .padding(20)\n        }\n        .background(PiggyGradients.background)\n    }\n    \n    private var sparklineSection: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Mini Sparklines\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 16) {\n                VStack(alignment: .leading, spacing: 8) {\n                    Text(\"Daily Spending\")\n                        .font(.subheadline)\n                        .foregroundColor(.white)\n                    \n                    SparklineChart(data: sampleChartData, color: .blue)\n                    \n                    Text(\"$45 today\")\n                        .font(.caption)\n                        .foregroundColor(.white.opacity(0.8))\n                }\n                .padding(12)\n                .background(Color.white.opacity(0.1))\n                .cornerRadius(12)\n                \n                VStack(alignment: .leading, spacing: 8) {\n                    Text(\"Savings Growth\")\n                        .font(.subheadline)\n                        .foregroundColor(.white)\n                    \n                    SparklineChart(data: sampleSavingsData, color: .green, showPoints: true)\n                    \n                    Text(\"+$120 this week\")\n                        .font(.caption)\n                        .foregroundColor(.white.opacity(0.8))\n                }\n                .padding(12)\n                .background(Color.white.opacity(0.1))\n                .cornerRadius(12)\n            }\n        }\n    }\n    \n    // MARK: - Responsive Demo\n    private var responsiveDemo: some View {\n        ScrollView {\n            LazyVStack(spacing: 20) {\n                Text(\"Responsive Design\")\n                    .font(.largeTitle)\n                    .fontWeight(.bold)\n                    .foregroundColor(.white)\n                    .frame(maxWidth: .infinity, alignment: .leading)\n                \n                // Current screen info\n                currentScreenInfo\n                \n                // Layout examples\n                layoutExamples\n                \n                // Typography scaling\n                typographyExamples\n                \n                // Spacing examples\n                spacingExamples\n            }\n            .padding(20)\n        }\n        .background(PiggyGradients.background)\n    }\n    \n    private var currentScreenInfo: some View {\n        VStack(alignment: .leading, spacing: 12) {\n            Text(\"Current Screen: \\(screenSizeDescription)\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            HStack {\n                Label(\"Width: \\(Int(UIScreen.main.bounds.width))pt\", systemImage: \"ruler\")\n                Spacer()\n                Label(\"Height: \\(Int(UIScreen.main.bounds.height))pt\", systemImage: \"ruler\")\n            }\n            .font(.caption)\n            .foregroundColor(.white.opacity(0.8))\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    private var layoutExamples: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Adaptive Layouts\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            // Grid that changes column count based on screen size\n            let columns = ResponsiveDesignTokens.Dimensions(screenSize: orientationManager.screenSize).dashboardColumns\n            \n            Text(\"\\(columns) columns on this screen\")\n                .font(.caption)\n                .foregroundColor(.white.opacity(0.8))\n            \n            ResponsiveGrid(columns: columns, spacing: 12) {\n                ForEach(0..<6) { index in\n                    RoundedRectangle(cornerRadius: 8)\n                        .fill(Color.piggyPrimary.opacity(0.3))\n                        .frame(height: 60)\n                        .overlay {\n                            Text(\"Item \\(index + 1)\")\n                                .font(.caption)\n                                .foregroundColor(.white)\n                        }\n                }\n            }\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    private var typographyExamples: some View {\n        let typography = ResponsiveDesignTokens.Typography(screenSize: orientationManager.screenSize)\n        \n        return VStack(alignment: .leading, spacing: 12) {\n            Text(\"Typography Scaling\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            VStack(alignment: .leading, spacing: 8) {\n                Text(\"Large Title\")\n                    .font(typography.largeTitle)\n                    .foregroundColor(.white)\n                \n                Text(\"Headline Text\")\n                    .font(typography.headline)\n                    .foregroundColor(.white)\n                \n                Text(\"Body text that scales responsively across different screen sizes and orientations.\")\n                    .font(typography.body)\n                    .foregroundColor(.white.opacity(0.8))\n                \n                Text(\"Caption text for additional details\")\n                    .font(typography.caption)\n                    .foregroundColor(.white.opacity(0.6))\n            }\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    private var spacingExamples: some View {\n        let spacing = ResponsiveDesignTokens.Spacing(screenSize: orientationManager.screenSize)\n        \n        return VStack(alignment: .leading, spacing: 16) {\n            Text(\"Responsive Spacing\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            VStack(alignment: .leading, spacing: spacing.sm) {\n                Text(\"Small spacing (\\(Int(spacing.sm))pt)\")\n                    .foregroundColor(.white.opacity(0.8))\n                \n                Text(\"Medium spacing (\\(Int(spacing.md))pt)\")\n                    .foregroundColor(.white.opacity(0.8))\n                    .padding(.top, spacing.md)\n                \n                Text(\"Large spacing (\\(Int(spacing.lg))pt)\")\n                    .foregroundColor(.white.opacity(0.8))\n                    .padding(.top, spacing.lg)\n            }\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    // MARK: - Interactions Demo\n    private var interactionsDemo: some View {\n        ScrollView {\n            LazyVStack(spacing: 20) {\n                Text(\"Interactive Features\")\n                    .font(.largeTitle)\n                    .fontWeight(.bold)\n                    .foregroundColor(.white)\n                    .frame(maxWidth: .infinity, alignment: .leading)\n                \n                // Tap interactions\n                tapInteractionsDemo\n                \n                // Drag interactions\n                dragInteractionsDemo\n                \n                // Animation examples\n                animationDemo\n            }\n            .padding(20)\n        }\n        .background(PiggyGradients.background)\n    }\n    \n    @State private var tappedMetric: String? = nil\n    \n    private var tapInteractionsDemo: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Tap to Select Metrics\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 2), spacing: 12) {\n                ForEach([\"Spending\", \"Savings\", \"Goals\", \"Artists\"], id: \\.self) { metric in\n                    Button(action: {\n                        withAnimation(ResponsiveDesignTokens.Animations.quickBounce) {\n                            tappedMetric = tappedMetric == metric ? nil : metric\n                        }\n                    }) {\n                        VStack(spacing: 8) {\n                            Image(systemName: iconForMetric(metric))\n                                .font(.title2)\n                                .foregroundColor(tappedMetric == metric ? .white : .gray)\n                            \n                            Text(metric)\n                                .font(.caption)\n                                .foregroundColor(tappedMetric == metric ? .white : .gray)\n                        }\n                        .frame(height: 80)\n                        .frame(maxWidth: .infinity)\n                        .background(\n                            RoundedRectangle(cornerRadius: 12)\n                                .fill(tappedMetric == metric ? Color.piggyPrimary : Color.white.opacity(0.1))\n                                .scaleEffect(tappedMetric == metric ? 1.05 : 1.0)\n                        )\n                    }\n                    .buttonStyle(PlainButtonStyle())\n                }\n            }\n            \n            if let selected = tappedMetric {\n                Text(\"Selected: \\(selected)\")\n                    .font(.subheadline)\n                    .foregroundColor(.white)\n                    .padding(.top, 8)\n            }\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    @State private var dragOffset: CGSize = .zero\n    \n    private var dragInteractionsDemo: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Drag Interactions\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            Text(\"Drag the chart to explore data\")\n                .font(.caption)\n                .foregroundColor(.white.opacity(0.8))\n            \n            RoundedRectangle(cornerRadius: 12)\n                .fill(Color.piggyPrimary)\n                .frame(width: 60, height: 60)\n                .offset(dragOffset)\n                .scaleEffect(dragOffset != .zero ? 1.1 : 1.0)\n                .animation(ResponsiveDesignTokens.Animations.smooth, value: dragOffset)\n                .gesture(\n                    DragGesture()\n                        .onChanged { value in\n                            dragOffset = value.translation\n                        }\n                        .onEnded { _ in\n                            withAnimation(ResponsiveDesignTokens.Animations.quickBounce) {\n                                dragOffset = .zero\n                            }\n                        }\n                )\n                .frame(maxWidth: .infinity)\n                .frame(height: 120)\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    @State private var animationTrigger = false\n    \n    private var animationDemo: some View {\n        VStack(alignment: .leading, spacing: 16) {\n            Text(\"Chart Animations\")\n                .font(.headline)\n                .foregroundColor(.white)\n            \n            Button(\"Trigger Animation\") {\n                withAnimation(ResponsiveDesignTokens.Animations.chartEntry) {\n                    animationTrigger.toggle()\n                }\n            }\n            .padding(12)\n            .background(Color.piggyPrimary)\n            .foregroundColor(.white)\n            .cornerRadius(8)\n            \n            // Animated bars\n            HStack(alignment: .bottom, spacing: 8) {\n                ForEach(0..<5) { index in\n                    RoundedRectangle(cornerRadius: 4)\n                        .fill(Color.blue)\n                        .frame(\n                            width: 24,\n                            height: animationTrigger ? CGFloat.random(in: 20...80) : 4\n                        )\n                        .animation(\n                            ResponsiveDesignTokens.Animations.chartEntry.delay(Double(index) * 0.1),\n                            value: animationTrigger\n                        )\n                }\n            }\n            .frame(height: 100)\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n    \n    // MARK: - Helper Properties\n    \n    private var screenSizeDescription: String {\n        switch orientationManager.screenSize {\n        case .compact: return \"Compact (iPhone SE)\"\n        case .regular: return \"Regular (iPhone)\"\n        case .large: return \"Large (iPhone Plus)\"\n        case .extraLarge: return \"Extra Large (iPad)\"\n        }\n    }\n    \n    // MARK: - Sample Data\n    \n    private var sampleChartData: [ChartDataPoint] {\n        let calendar = Calendar.current\n        let now = Date()\n        return (0..<7).map { i in\n            let date = calendar.date(byAdding: .day, value: i - 6, to: now) ?? now\n            return ChartDataPoint(\n                date: date,\n                value: Double.random(in: 20...80),\n                label: \"Day \\(i + 1)\"\n            )\n        }\n    }\n    \n    private var sampleSavingsData: [ChartDataPoint] {\n        let calendar = Calendar.current\n        let now = Date()\n        var cumulative = 100.0\n        return (0..<7).map { i in\n            let date = calendar.date(byAdding: .day, value: i - 6, to: now) ?? now\n            cumulative += Double.random(in: 10...30)\n            return ChartDataPoint(\n                date: date,\n                value: cumulative,\n                label: \"$\\(Int(cumulative))\"\n            )\n        }\n    }\n    \n    private var sampleCategoryData: [ChartDataPoint] {\n        return [\n            ChartDataPoint(date: Date(), value: 45, label: \"Concert Tickets\"),\n            ChartDataPoint(date: Date(), value: 25, label: \"Albums\"),\n            ChartDataPoint(date: Date(), value: 20, label: \"Merchandise\"),\n            ChartDataPoint(date: Date(), value: 10, label: \"Digital Content\")\n        ]\n    }\n    \n    private var sampleGoalsData: [ChartDataPoint] {\n        return [\n            ChartDataPoint(date: Date(), value: 84, label: \"BTS Concert\"),\n            ChartDataPoint(date: Date(), value: 57, label: \"BLACKPINK Merch\"),\n            ChartDataPoint(date: Date(), value: 92, label: \"Album Collection\"),\n            ChartDataPoint(date: Date(), value: 34, label: \"Fan Meeting\")\n        ]\n    }\n    \n    private func iconForMetric(_ metric: String) -> String {\n        switch metric {\n        case \"Spending\": return \"creditcard\"\n        case \"Savings\": return \"arrow.up.circle\"\n        case \"Goals\": return \"target\"\n        case \"Artists\": return \"music.note\"\n        default: return \"circle\"\n        }\n    }\n}\n\n// MARK: - Supporting Views\n\nstruct FeatureCard: View {\n    let icon: String\n    let title: String\n    let description: String\n    let color: Color\n    \n    var body: some View {\n        VStack(spacing: 12) {\n            Image(systemName: icon)\n                .font(.title2)\n                .foregroundColor(color)\n                .frame(width: 40, height: 40)\n                .background(color.opacity(0.2))\n                .cornerRadius(8)\n            \n            VStack(spacing: 4) {\n                Text(title)\n                    .font(.subheadline)\n                    .fontWeight(.semibold)\n                    .foregroundColor(.white)\n                \n                Text(description)\n                    .font(.caption)\n                    .foregroundColor(.white.opacity(0.8))\n                    .multilineTextAlignment(.center)\n            }\n        }\n        .padding(16)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(16)\n    }\n}\n\nstruct StatCard: View {\n    let title: String\n    let value: String\n    let icon: String\n    \n    var body: some View {\n        VStack(spacing: 8) {\n            Image(systemName: icon)\n                .font(.title3)\n                .foregroundColor(.piggyPrimary)\n            \n            Text(value)\n                .font(.title2)\n                .fontWeight(.bold)\n                .foregroundColor(.white)\n            \n            Text(title)\n                .font(.caption2)\n                .foregroundColor(.white.opacity(0.8))\n                .multilineTextAlignment(.center)\n        }\n        .padding(12)\n        .background(Color.white.opacity(0.1))\n        .cornerRadius(12)\n    }\n}\n\n#Preview {\n    DashboardDemo()\n}"