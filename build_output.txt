Command line invocation:
    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project FanPlan.xcodeproj -scheme "Piggy Bong" -destination "platform=iOS Simulator,name=iPhone 16" build

Resolve Package Graph


Resolved source packages:
  swift-crypto: https://github.com/apple/swift-crypto.git @ 3.13.2
  swift-concurrency-extras: https://github.com/pointfreeco/swift-concurrency-extras @ 1.3.1
  Supabase: https://github.com/supabase/supabase-swift @ 2.30.2
  RevenueCat: https://github.com/RevenueCat/purchases-ios.git @ 5.35.0
  swift-clocks: https://github.com/pointfreeco/swift-clocks @ 1.0.6
  xctest-dynamic-overlay: https://github.com/pointfreeco/xctest-dynamic-overlay @ 1.6.0
  swift-asn1: https://github.com/apple/swift-asn1.git @ 1.4.0
  swift-http-types: https://github.com/apple/swift-http-types.git @ 1.4.0

--- xcodebuild: WARNING: Using the first of multiple matching destinations:
{ platform:iOS Simulator, arch:arm64, id:35AA94FF-5808-417D-A174-CECD7D93FF17, OS:18.4, name:iPhone 16 }
{ platform:iOS Simulator, arch:x86_64, id:35AA94FF-5808-417D-A174-CECD7D93FF17, OS:18.4, name:iPhone 16 }
ComputePackagePrebuildTargetDependencyGraph

Prepare packages

CreateBuildRequest

SendProjectDescription

CreateBuildOperation

ComputeTargetDependencyGraph
note: Building targets in dependency order
note: Target dependency graph (4 targets)
    Target 'Piggy Bong' in project 'FanPlan'
        ➜ Explicit dependency on target 'RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat_RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat_RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat_RevenueCat' in project 'RevenueCat' (no dependencies)

GatherProvisioningInputs

CreateBuildDescription

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -v -E -dM -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -x c -c /dev/null

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/usr/bin/actool --print-asset-tag-combinations --output-format xml1 /Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/Assets.xcassets

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --version

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/usr/bin/actool --version --output-format xml1

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld -version_details

ReadFileContents /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/docc/features.json

Build description signature: 35421e76e8b80da2d7355cb1dc072125
Build description path: /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/XCBuildData/35421e76e8b80da2d7355cb1dc072125.xcbuilddata
ClangStatCache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang-stat-cache /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang-stat-cache /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -o /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache

ProcessInfoPlistFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/RevenueCat_RevenueCat.bundle/Info.plist /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat_RevenueCat.build/empty-RevenueCat_RevenueCat.plist (in target 'RevenueCat_RevenueCat' from project 'RevenueCat')
    cd /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/SourcePackages/checkouts/purchases-ios
    builtin-infoPlistUtility /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat_RevenueCat.build/empty-RevenueCat_RevenueCat.plist -producttype com.apple.product-type.bundle -expandbuildsettings -format binary -platform iphonesimulator -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/RevenueCat_RevenueCat.bundle/Info.plist

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftConstValuesFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftConstValuesFileList

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.LinkFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.LinkFileList

SwiftDriver RevenueCat normal arm64 com.apple.xcode.tools.swift.compiler (in target 'RevenueCat' from project 'RevenueCat')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj
    builtin-SwiftDriver -- /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -module-name RevenueCat -Onone -enforce-exclusivity\=checked @/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat.SwiftFileList -DSWIFT_PACKAGE -DDEBUG -DXcode -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/plugins/testing -enable-experimental-feature DebugDescriptionMacro -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -target arm64-apple-ios13.0-simulator -g -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -Xfrontend -serialize-debugging-options -profile-coverage-mapping -profile-generate -enable-testing -suppress-warnings -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -swift-version 5 -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -I /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/lib -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks -F /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk/Developer/Library/Frameworks -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64 -c -j10 -enable-batch-mode -incremental -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat-OutputFileMap.json -use-frontend-parseable-output -save-temps -no-color-diagnostics -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat.swiftmodule -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -package-name purchases_ios -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/swift-overrides.hmap -emit-const-values -Xfrontend -const-gather-protocols-file -Xfrontend /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat_const_extract_protocols.json -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources -Xcc -DSWIFT_PACKAGE -Xcc -DDEBUG\=1 -emit-objc-header -emit-objc-header-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat-Swift.h -working-directory /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj -experimental-emit-module-separately -disable-cmo

SwiftDriver Piggy\ Bong normal arm64 com.apple.xcode.tools.swift.compiler (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    builtin-SwiftDriver -- /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -module-name Piggy_Bong -Onone -enforce-exclusivity\=checked @/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList -DDEBUG -enable-bare-slash-regex -enable-experimental-feature DebugDescriptionMacro -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -target arm64-apple-ios18.4-simulator -g -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -Xfrontend -serialize-debugging-options -profile-coverage-mapping -profile-generate -enable-testing -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -swift-version 5 -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/PackageFrameworks -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64 -c -j10 -enable-batch-mode -incremental -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong-OutputFileMap.json -use-frontend-parseable-output -save-temps -no-color-diagnostics -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy_Bong.swiftmodule -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/swift-overrides.hmap -emit-const-values -Xfrontend -const-gather-protocols-file -Xfrontend /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong_const_extract_protocols.json -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-generated-files.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-own-target-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/FanPlan-53290c13ec0670811797c78566c965fd-VFS-iphonesimulator/all-product-headers.yaml -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-project-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources -Xcc -DDEBUG\=1 -emit-objc-header -emit-objc-header-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy_Bong-Swift.h -working-directory /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -experimental-emit-module-separately -disable-cmo

CompileAssetCatalogVariant thinned /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/Piggy\ Bong.app /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Assets.xcassets (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    /Applications/Xcode.app/Contents/Developer/usr/bin/actool /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Assets.xcassets --compile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_output/thinned --output-format human-readable-text --notices --warnings --export-dependency-info /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_dependencies_thinned --output-partial-info-plist /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_generated_info.plist_thinned --app-icon AppIcon --accent-color AccentColor --compress-pngs --enable-on-demand-resources YES --filter-for-thinning-device-configuration iPhone17,3 --filter-for-device-os-version 18.4 --development-region en --target-device iphone --target-device ipad --minimum-deployment-target 18.4 --platform iphonesimulator

SwiftCompile normal arm64 Compiling\ RevenueCatConfig.swift,\ FanHomeDashboardView.swift,\ OnboardingContainer.swift,\ PriorityPlanningView.swift,\ DashboardComponents.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityPlanningView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift (in target 'Piggy Bong' from project 'FanPlan')
SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityPlanningView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ SmartAllocationService.swift,\ Budget.swift,\ IdolNewsFeedView.swift,\ GoalProgressSheet.swift,\ OnboardingIntegrationTests.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift (in target 'Piggy Bong' from project 'FanPlan')
SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ EnhancedPaywallView.swift,\ User.swift,\ CleanDashboardView.swift,\ DesignTokens.swift,\ IdolUpdateService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftEmitModule normal arm64 Emitting\ module\ for\ Piggy_Bong (in target 'Piggy Bong' from project 'FanPlan')

EmitSwiftModule normal arm64 (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ ValidationService.swift,\ Config.swift,\ Double+Extensions.swift,\ IntroCardsView.swift,\ PaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ FanPlanApp.swift,\ OnboardingErrorHandler.swift,\ QuickAddView.swift,\ DashboardViewModel.swift,\ FanExperienceModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardViewModel.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardViewModel.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ OnboardingService.swift,\ Secrets.swift,\ Artist.swift,\ AuthenticationView.swift,\ Date+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
Failed frontend command:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-frontend -frontend -c /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatManager.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ArtistSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DatabaseModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingCoordinator.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityPlanningView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardViewModel.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/NameInputView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/WelcomeView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedOnboardingView.swift /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/GeneratedAssetSymbols.swift -supplementary-output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/supplementaryOutputs-8 -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64 -target arm64-apple-ios18.4-simulator -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/PackageFrameworks -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -no-color-diagnostics -enable-testing -g -debug-info-format\=dwarf -dwarf-version\=5 -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -profile-generate -profile-coverage-mapping -swift-version 5 -enforce-exclusivity\=checked -Onone -D DEBUG -serialize-debugging-options -const-gather-protocols-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong_const_extract_protocols.json -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -empty-abi-descriptor -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -Xcc -working-directory -Xcc /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift -enable-anonymous-context-mangled-names -file-compilation-dir /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-generated-files.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-own-target-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/FanPlan-53290c13ec0670811797c78566c965fd-VFS-iphonesimulator/all-product-headers.yaml -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-project-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources -Xcc -DDEBUG\=1 -module-name Piggy_Bong -frontend-parseable-output -disable-clang-spi -target-sdk-version 18.4 -target-sdk-name iphonesimulator18.4 -external-plugin-path /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/lib/swift/host/plugins\#/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/swift-plugin-server -external-plugin-path /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/local/lib/swift/host/plugins\#/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/swift-plugin-server -in-process-plugin-server-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/libSwiftInProcPluginServer.dylib -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/plugins -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/local/lib/swift/host/plugins -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/OnboardingService.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Secrets.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Artist.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/AuthenticationView.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Date+Extensions.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/OnboardingService.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Secrets.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Artist.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/AuthenticationView.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Date+Extensions.o -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -index-system-modules

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:52:14: error: keyword 'public' cannot be used as an identifier here
        case public = "public"
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:52:14: note: if this name is unavoidable, use backticks to escape it
        case public = "public"
             ^~~~~~
             `public`
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:54:14: error: keyword 'private' cannot be used as an identifier here
        case private = "private"
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:54:14: note: if this name is unavoidable, use backticks to escape it
        case private = "private"
             ^~~~~~~
             `private`
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
                                                                                                                                                                                                                                                                 ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
                                                                                                                                                                                                                                                                   ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:241:43: warning: result of call to 'createUserArtist(userId:artistId:priorityRank:monthlyAllocation:)' is unused
                try await supabaseService.createUserArtist(
                                          ^               ~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:455:30: warning: expression implicitly coerced from 'String?' to 'Any'
                "artist_id": selectedArtists.first?.id.uuidString, // Link to top artist
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:455:56: note: provide a default value to avoid this warning
                "artist_id": selectedArtists.first?.id.uuidString, // Link to top artist
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
                                                                  ?? <#default value#>
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:455:56: note: force-unwrap the value to avoid this warning
                "artist_id": selectedArtists.first?.id.uuidString, // Link to top artist
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
                                                                 !
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:455:56: note: explicitly cast to 'Any' with 'as Any' to silence this warning
                "artist_id": selectedArtists.first?.id.uuidString, // Link to top artist
                             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~
                                                                  as Any
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:459:38: warning: expression implicitly coerced from 'String?' to 'Any'
                "countdown_context": generateCountdownContext(for: template)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:459:38: note: provide a default value to avoid this warning
                "countdown_context": generateCountdownContext(for: template)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                             ?? <#default value#>
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:459:38: note: force-unwrap the value to avoid this warning
                "countdown_context": generateCountdownContext(for: template)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                            !
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:459:38: note: explicitly cast to 'Any' with 'as Any' to silence this warning
                "countdown_context": generateCountdownContext(for: template)
                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                                                                             as Any
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: error: type 'Any' cannot conform to 'Encodable'
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: note: only concrete types such as structs, enums and classes can conform to protocols
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: note: requirement from conditional conformance of '[String : Any]' to 'Encodable'
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: error: type 'Any' cannot conform to 'Decodable'
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: note: only concrete types such as structs, enums and classes can conform to protocols
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:472:69: note: requirement from conditional conformance of '[String : Any]' to 'Decodable'
            let response: [String: Any] = try await supabaseService.callFunction(
                                                                    ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:541:39: warning: result of call to 'createUserArtist(userId:artistId:priorityRank:monthlyAllocation:)' is unused
            try await supabaseService.createUserArtist(
                                      ^               ~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift:554:39: warning: result of call to 'createFanGoal(userId:artistId:name:targetAmount:deadline:category:goalType:isTimeSensitive:eventDate:countdownContext:priority:)' is unused
            try await supabaseService.createFanGoal(
                                      ^            ~

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
                                                                                                                                                                                                                                                                 ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
                                                                                                                                                                                                                                                                   ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
                                                                                                                                                                                                                                                                 ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
                                                                                                                                                                                                                                                                   ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
                                                                                                                                                                                                                                                                 ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
                                                                                                                                                                                                                                                                   ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:919:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("Default")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:923:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("4th Artist Limit")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:927:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("AI Coaching")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:65:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: email) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:77:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: password) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:198:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: name) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:211:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: email) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:223:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: password) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:235:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: monthlyBudget) { _ in
                     ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
                                                                                                                                                                                                                                                                 ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:258: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                 ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: consecutive statements on a line must be separated by ';'
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^
                                                                                                                                                                                                                                                                   ;
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift:163:260: error: expressions are not allowed at the top level
                        Text("\\(errorHandler.errorQueue.count) more error(s) pending")\n                            .font(.caption)\n                            .foregroundColor(.secondary)\n                    }\n                }\n            }\n    }\n}\n\n// MARK: - Error Toast View\nstruct OnboardingErrorToast: View {\n    @ObservedObject var errorHandler: OnboardingErrorHandler\n    \n    var body: some View {\n        ZStack {\n            if let error = errorHandler.currentError, errorHandler.isShowingError {\n                VStack {\n                    Spacer()\n                    \n                    HStack(spacing: 12) {\n                        // Error icon\n                        ZStack {\n                            Circle()\n                                .fill(error.isRecoverable ? Color.orange : Color.red)\n                                .frame(width: 24, height: 24)\n                            \n                            Image(systemName: error.isRecoverable ? "exclamationmark.triangle.fill" : "xmark")\n                                .font(.system(size: 12, weight: .bold))\n                                .foregroundColor(.white)\n                        }\n                        \n                        // Error message\n                        VStack(alignment: .leading, spacing: 2) {\n                            Text(error.localizedDescription)\n                                .font(.system(size: 14, weight: .medium))\n                                .foregroundColor(.primary)\n                                .lineLimit(2)\n                            \n                            if let recovery = error.recoverySuggestion {\n                                Text(recovery)\n                                    .font(.system(size: 12))\n                                    .foregroundColor(.secondary)\n                                    .lineLimit(1)\n                            }\n                        }\n                        \n                        Spacer()\n                        \n                        // Dismiss button\n                        Button(action: {\n                            errorHandler.dismissCurrentError()\n                        }) {\n                            Image(systemName: "xmark")\n                                .font(.system(size: 12, weight: .semibold))\n                                .foregroundColor(.secondary)\n                        }\n                    }\n                    .padding(16)\n                    .background(\n                        RoundedRectangle(cornerRadius: 12)\n                            .fill(.regularMaterial)\n                            .shadow(color: .black.opacity(0.1), radius: 8, x: 0, y: 4)\n                    )\n                    .padding(.horizontal, 16)\n                    .padding(.bottom, 100) // Above bottom button\n                }\n                .transition(.asymmetric(\n                    insertion: .move(edge: .bottom).combined(with: .opacity),\n                    removal: .move(edge: .bottom).combined(with: .opacity)\n                ))\n                .animation(.spring(response: 0.5, dampingFraction: 0.8), value: errorHandler.isShowingError)\n            }\n        }\n        .allowsHitTesting(errorHandler.isShowingError)\n    }\n}\n\n// MARK: - Haptic Feedback Helper\nstruct HapticFeedback {\n    static func error() {\n        let impactFeedback = UIImpactFeedbackGenerator(style: .heavy)\n        impactFeedback.impactOccurred()\n        \n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.error)\n    }\n    \n    static func success() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.success)\n    }\n    \n    static func warning() {\n        let notificationFeedback = UINotificationFeedbackGenerator()\n        notificationFeedback.notificationOccurred(.warning)\n    }\n}\n\n// MARK: - View Extensions for Error Handling\nextension View {\n    func onboardingErrorHandling(\n        errorHandler: OnboardingErrorHandler,\n        currentStep: OnboardingStep,\n        onRetry: (() async -> Void)? = nil,\n        onSkip: (() -> Void)? = nil,\n        showToast: Bool = false\n    ) -> some View {\n        self\n            .background {\n                if showToast {\n                    OnboardingErrorToast(errorHandler: errorHandler)\n                } else {\n                    OnboardingErrorAlert(\n                        errorHandler: errorHandler,\n                        currentStep: currentStep,\n                        onRetry: onRetry,\n                        onSkip: onSkip\n                    )\n                }\n            }\n            .onChange(of: errorHandler.currentError) { _, error in\n                if error != nil {\n                    HapticFeedback.error()\n                }\n            }\n    }\n    \n    func handleOnboardingError<T>(\n        _ result: Result<T, Error>,\n        step: OnboardingStep,\n        errorHandler: OnboardingErrorHandler\n    ) {\n        switch result {\n        case .success:\n            break\n        case .failure(let error):\n            let onboardingError = OnboardingError.from(error)\n            errorHandler.handle(onboardingError, step: step)\n        }\n    }\n}\n\n// MARK: - Network Connectivity Monitor\n@MainActor\nclass NetworkMonitor: ObservableObject {\n    @Published var isConnected = true\n    @Published var connectionType: ConnectionType = .wifi\n    \n    enum ConnectionType {\n        case wifi\n        case cellular\n        case none\n    }\n    \n    static let shared = NetworkMonitor()\n    \n    private init() {\n        // In a real implementation, this would use Network framework\n        // For now, assume connected\n        checkConnection()\n    }\n    \n    private func checkConnection() {\n        // Mock implementation\n        // In real app, use NWPathMonitor\n    }\n    \n    func hasConnection() -> Bool {\n        return isConnected\n    }\n}\n\n// MARK: - Validation Helpers\nstruct OnboardingValidation {\n    static func validateStep(_ step: OnboardingStep, data: OnboardingData) -> OnboardingError? {\n        switch step {\n        case .welcome, .intro:\n            return nil\n            \n        case .name:\n            if data.name.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {\n                return .validationError("name")\n            }\n            if data.name.count < 2 {\n                return .validationError("name (minimum 2 characters)")\n            }\n            return nil\n            \n        case .budget:\n            if data.monthlyBudget < OnboardingConstants.minBudget {\n                return .validationError("budget (minimum $\\(Int(OnboardingConstants.minBudget)))")\n            }\n            if data.monthlyBudget > OnboardingConstants.maxBudget {\n                return .validationError("budget (maximum $\\(Int(OnboardingConstants.maxBudget)))")\n            }\n            return nil\n            \n        case .artistSelection:\n            if data.selectedArtists.isEmpty {\n                return nil // Artist selection is optional\n            }\n            if data.selectedArtists.count > OnboardingConstants.maxArtistsSelection {\n                return .validationError("artist selection (maximum \\(OnboardingConstants.maxArtistsSelection))")\n            }\n            return nil\n            \n        case .goalSetting:\n            if data.selectedGoals.isEmpty {\n                return nil // Goal setting is optional\n            }\n            if data.selectedGoals.count > OnboardingConstants.maxGoalsSelection {\n                return .validationError("goal selection (maximum \\(OnboardingConstants.maxGoalsSelection))")\n            }\n            return nil\n            \n        case .permissions:\n            return nil // Permissions are optional\n        }\n    }\n}"
                                                                                                                                                                                                                                                                   ^

SwiftCompile normal arm64 Compiling\ LoadingView.swift,\ PermissionRequestView.swift,\ SupabaseService.swift,\ BudgetSelectionView.swift,\ GoalSetupView.swift,\ IdolUpdateModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ Purchase.swift,\ DashboardModels.swift,\ FanDashboardService.swift,\ MinimalApp.swift,\ PremiumGate.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftEmitModule normal arm64 Emitting\ module\ for\ RevenueCat (in target 'RevenueCat' from project 'RevenueCat')
Command SwiftEmitModule failed with a nonzero exit code

note: Disabling hardened runtime with ad-hoc codesigning. (in target 'Piggy Bong' from project 'FanPlan')
** BUILD FAILED **


The following build commands failed:
	SwiftCompile normal arm64 Compiling\ OnboardingService.swift,\ Secrets.swift,\ Artist.swift,\ AuthenticationView.swift,\ Date+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftEmitModule normal arm64 Emitting\ module\ for\ RevenueCat (in target 'RevenueCat' from project 'RevenueCat')
	Building project FanPlan with scheme Piggy Bong
(8 failures)
