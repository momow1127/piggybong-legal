Command line invocation:
    /Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild -project FanPlan.xcodeproj -scheme "Piggy Bong" -destination "platform=iOS Simulator,name=iPhone 16" build

Resolve Package Graph


Resolved source packages:
  swift-crypto: https://github.com/apple/swift-crypto.git @ 3.13.2
  RevenueCat: https://github.com/RevenueCat/purchases-ios.git @ 5.35.0
  Supabase: https://github.com/supabase/supabase-swift @ 2.30.2
  swift-asn1: https://github.com/apple/swift-asn1.git @ 1.4.0
  xctest-dynamic-overlay: https://github.com/pointfreeco/xctest-dynamic-overlay @ 1.6.0
  swift-http-types: https://github.com/apple/swift-http-types.git @ 1.4.0
  swift-concurrency-extras: https://github.com/pointfreeco/swift-concurrency-extras @ 1.3.1
  swift-clocks: https://github.com/pointfreeco/swift-clocks @ 1.0.6

--- xcodebuild: WARNING: Using the first of multiple matching destinations:
{ platform:iOS Simulator, arch:arm64, id:35AA94FF-5808-417D-A174-CECD7D93FF17, OS:18.4, name:iPhone 16 }
{ platform:iOS Simulator, arch:x86_64, id:35AA94FF-5808-417D-A174-CECD7D93FF17, OS:18.4, name:iPhone 16 }
ComputePackagePrebuildTargetDependencyGraph

Prepare packages

CreateBuildRequest

SendProjectDescription

CreateBuildOperation

ComputeTargetDependencyGraph
note: Building targets in dependency order
note: Target dependency graph (4 targets)
    Target 'Piggy Bong' in project 'FanPlan'
        ➜ Explicit dependency on target 'RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat_RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat' in project 'RevenueCat'
        ➜ Explicit dependency on target 'RevenueCat_RevenueCat' in project 'RevenueCat'
    Target 'RevenueCat_RevenueCat' in project 'RevenueCat' (no dependencies)

GatherProvisioningInputs

CreateBuildDescription

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -v -E -dM -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -x c -c /dev/null

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/usr/bin/actool --print-asset-tag-combinations --output-format xml1 /Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/Assets.xcassets

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/usr/bin/actool --version --output-format xml1

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc --version

ExecuteExternalTool /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld -version_details

ReadFileContents /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/share/docc/features.json

Build description signature: 0aab26e24f79be1a3a91de38ba45c195
Build description path: /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/XCBuildData/0aab26e24f79be1a3a91de38ba45c195.xcbuilddata
ClangStatCache /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang-stat-cache /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang-stat-cache /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -o /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache

ProcessInfoPlistFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/RevenueCat_RevenueCat.bundle/Info.plist /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat_RevenueCat.build/empty-RevenueCat_RevenueCat.plist (in target 'RevenueCat_RevenueCat' from project 'RevenueCat')
    cd /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/SourcePackages/checkouts/purchases-ios
    builtin-infoPlistUtility /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat_RevenueCat.build/empty-RevenueCat_RevenueCat.plist -producttype com.apple.product-type.bundle -expandbuildsettings -format binary -platform iphonesimulator -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/RevenueCat_RevenueCat.bundle/Info.plist

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftConstValuesFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftConstValuesFileList

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList

WriteAuxiliaryFile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.LinkFileList (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    write-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.LinkFileList

SwiftDriver RevenueCat normal arm64 com.apple.xcode.tools.swift.compiler (in target 'RevenueCat' from project 'RevenueCat')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj
    builtin-SwiftDriver -- /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -module-name RevenueCat -Onone -enforce-exclusivity\=checked @/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat.SwiftFileList -DSWIFT_PACKAGE -DDEBUG -DXcode -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/plugins/testing -enable-experimental-feature DebugDescriptionMacro -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -target arm64-apple-ios13.0-simulator -g -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -Xfrontend -serialize-debugging-options -profile-coverage-mapping -profile-generate -enable-testing -suppress-warnings -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -swift-version 5 -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -I /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/usr/lib -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks -F /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk/Developer/Library/Frameworks -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64 -c -j10 -enable-batch-mode -incremental -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat-OutputFileMap.json -use-frontend-parseable-output -save-temps -no-color-diagnostics -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat.swiftmodule -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -package-name purchases_ios -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/swift-overrides.hmap -emit-const-values -Xfrontend -const-gather-protocols-file -Xfrontend /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat_const_extract_protocols.json -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/DerivedSources -Xcc -DSWIFT_PACKAGE -Xcc -DDEBUG\=1 -emit-objc-header -emit-objc-header-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/RevenueCat.build/Debug-iphonesimulator/RevenueCat.build/Objects-normal/arm64/RevenueCat-Swift.h -working-directory /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan.xcodeproj -experimental-emit-module-separately -disable-cmo

SwiftDriver Piggy\ Bong normal arm64 com.apple.xcode.tools.swift.compiler (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    builtin-SwiftDriver -- /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swiftc -module-name Piggy_Bong -Onone -enforce-exclusivity\=checked @/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong.SwiftFileList -DDEBUG -enable-bare-slash-regex -enable-experimental-feature DebugDescriptionMacro -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -target arm64-apple-ios18.4-simulator -g -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -Xfrontend -serialize-debugging-options -profile-coverage-mapping -profile-generate -enable-testing -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -swift-version 5 -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/PackageFrameworks -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64 -c -j10 -enable-batch-mode -incremental -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong-OutputFileMap.json -use-frontend-parseable-output -save-temps -no-color-diagnostics -serialize-diagnostics -emit-dependencies -emit-module -emit-module-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy_Bong.swiftmodule -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/swift-overrides.hmap -emit-const-values -Xfrontend -const-gather-protocols-file -Xfrontend /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong_const_extract_protocols.json -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-generated-files.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-own-target-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/FanPlan-53290c13ec0670811797c78566c965fd-VFS-iphonesimulator/all-product-headers.yaml -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-project-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources -Xcc -DDEBUG\=1 -emit-objc-header -emit-objc-header-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy_Bong-Swift.h -working-directory /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -experimental-emit-module-separately -disable-cmo

CompileAssetCatalogVariant thinned /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/Piggy\ Bong.app /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Assets.xcassets (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    /Applications/Xcode.app/Contents/Developer/usr/bin/actool /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Assets.xcassets --compile /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_output/thinned --output-format human-readable-text --notices --warnings --export-dependency-info /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_dependencies_thinned --output-partial-info-plist /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/assetcatalog_generated_info.plist_thinned --app-icon AppIcon --accent-color AccentColor --compress-pngs --enable-on-demand-resources YES --filter-for-thinning-device-configuration iPhone17,3 --filter-for-device-os-version 18.4 --development-region en --target-device iphone --target-device ipad --minimum-deployment-target 18.4 --platform iphonesimulator

SwiftCompile normal arm64 Compiling\ PaywallView.swift,\ SmartAllocationService.swift,\ CleanDashboardView.swift,\ DesignTokens.swift,\ IdolUpdateService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift (in target 'Piggy Bong' from project 'FanPlan')
SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ DashboardModels.swift,\ FanDashboardService.swift,\ MinimalApp.swift,\ PermissionRequestView.swift,\ SupabaseService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift (in target 'Piggy Bong' from project 'FanPlan')
SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ OnboardingIntegrationTests.swift,\ RevenueCatConfig.swift,\ AuthenticationView.swift,\ Date+Extensions.swift,\ FanPlanApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift (in target 'Piggy Bong' from project 'FanPlan')
Failed frontend command:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift-frontend -frontend -c /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/NameInputView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedOnboardingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DatabaseModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingCoordinator.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/WelcomeView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Artist.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanDashboardService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/MinimalApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PermissionRequestView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SupabaseService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatManager.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/SmartAllocationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/CleanDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DesignTokens.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateService.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift -primary-file /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingErrorHandler.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PriorityPlanningView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ArtistSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardViewModel.swift /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/GeneratedAssetSymbols.swift -supplementary-output-file-map /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/supplementaryOutputs-9 -emit-localized-strings -emit-localized-strings-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64 -target arm64-apple-ios18.4-simulator -Xllvm -aarch64-use-tbi -enable-objc-interop -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator18.4.sdk -I /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/PackageFrameworks -F /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator -no-color-diagnostics -enable-testing -g -debug-info-format\=dwarf -dwarf-version\=5 -module-cache-path /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex -profile-generate -profile-coverage-mapping -swift-version 5 -enforce-exclusivity\=checked -Onone -D DEBUG -serialize-debugging-options -const-gather-protocols-file /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Piggy\ Bong_const_extract_protocols.json -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -empty-abi-descriptor -validate-clang-modules-once -clang-build-session-file /Users/momow1127/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/Session.modulevalidation -Xcc -working-directory -Xcc /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -resource-dir /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift -enable-anonymous-context-mangled-names -file-compilation-dir /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main -Xcc -ivfsstatcache -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/SDKStatCaches.noindex/iphonesimulator18.4-22E235-71825a6d136aa4733edcbe86ece5525b.sdkstatcache -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-generated-files.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-own-target-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/FanPlan-53290c13ec0670811797c78566c965fd-VFS-iphonesimulator/all-product-headers.yaml -Xcc -iquote -Xcc /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Piggy\ Bong-project-headers.hmap -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Products/Debug-iphonesimulator/include -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources-normal/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources/arm64 -Xcc -I/Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/DerivedSources -Xcc -DDEBUG\=1 -module-name Piggy_Bong -frontend-parseable-output -disable-clang-spi -target-sdk-version 18.4 -target-sdk-name iphonesimulator18.4 -external-plugin-path /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/lib/swift/host/plugins\#/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/swift-plugin-server -external-plugin-path /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/local/lib/swift/host/plugins\#/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/swift-plugin-server -in-process-plugin-server-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/libSwiftInProcPluginServer.dylib -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/host/plugins -plugin-path /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/local/lib/swift/host/plugins -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/OnboardingIntegrationTests.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/RevenueCatConfig.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/AuthenticationView.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Date+Extensions.o -o /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Build/Intermediates.noindex/FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/FanPlanApp.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/OnboardingIntegrationTests.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/RevenueCatConfig.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/AuthenticationView.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/Date+Extensions.o -index-unit-output-path /FanPlan.build/Debug-iphonesimulator/Piggy\ Bong.build/Objects-normal/arm64/FanPlanApp.o -index-store-path /Users/momow1127/Library/Developer/Xcode/DerivedData/FanPlan-czmcvmyhngyjszeuiywomubvdbss/Index.noindex/DataStore -index-system-modules

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' at end of brace statement
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:24:30: note: to match this opening '{'
    func runAllTests() async {
                             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' in class
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:14:52: note: to match this opening '{'
class OnboardingIntegrationTests: ObservableObject {
                                                   ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:33:15: error: cannot find 'runTest' in scope
        await runTest("Backend Service Initialization") {
              ^~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:34:23: error: cannot find 'testBackendServiceInitialization' in scope
            try await testBackendServiceInitialization()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:37:15: error: cannot find 'runTest' in scope
        await runTest("User Creation Flow") {
              ^~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:38:23: error: cannot find 'testUserCreationFlow' in scope
            try await testUserCreationFlow()
                      ^~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:41:15: error: cannot find 'runTest' in scope
        await runTest("Artist Loading and Search") {
              ^~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:42:23: error: cannot find 'testArtistLoadingAndSearch' in scope
            try await testArtistLoadingAndSearch()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:45:15: error: cannot find 'runTest' in scope
        await runTest("Goal Templates Loading") {
              ^~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:46:23: error: cannot find 'testGoalTemplatesLoading' in scope
            try await testGoalTemplatesLoading()
                      ^~~~~~~~~~~~~~~~~~~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:49:15: error: cannot find 'runTest' in scope
        await runTest("Onboarding Progress Tracking") {
              ^~~~~~~
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:50:23: error: cannot find 'testOnboardingProgressTracking' in scope
            try await testOnboardingProgressTracking()
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' at end of brace statement
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:24:30: note: to match this opening '{'
    func runAllTests() async {
                             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' in class
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:14:52: note: to match this opening '{'
class OnboardingIntegrationTests: ObservableObject {
                                                   ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' at end of brace statement
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:24:30: note: to match this opening '{'
    func runAllTests() async {
                             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' in class
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:14:52: note: to match this opening '{'
class OnboardingIntegrationTests: ObservableObject {
                                                   ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:919:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("Default")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:923:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("4th Artist Limit")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift:927:14: warning: previewDisplayName is ignored in a #Preview macro. Provide the name to the macro initializer, e.g. `#Preview("preview name")` (from macro 'Preview')
            .previewDisplayName("AI Coaching")
             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:65:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: email) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:77:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: password) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:198:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: name) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:211:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: email) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:223:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: password) { _ in
                     ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift:235:22: warning: 'onChange(of:perform:)' was deprecated in iOS 17.0: Use `onChange` with a two or zero parameter action closure instead.
                    .onChange(of: monthlyBudget) { _ in
                     ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' at end of brace statement
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:24:30: note: to match this opening '{'
    func runAllTests() async {
                             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' in class
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:14:52: note: to match this opening '{'
class OnboardingIntegrationTests: ObservableObject {
                                                   ^

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' at end of brace statement
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:24:30: note: to match this opening '{'
    func runAllTests() async {
                             ^
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:53:19278: error: expected '}' in class
        // UI Integration Tests\n        await runTest("OnboardingData Validation") {\n            try await testOnboardingDataValidation()\n        }\n        \n        await runTest("Artist Selection Integration") {\n            try await testArtistSelectionIntegration()\n        }\n        \n        await runTest("Goal Setup Integration") {\n            try await testGoalSetupIntegration()\n        }\n        \n        await runTest("Permission Handling") {\n            try await testPermissionHandling()\n        }\n        \n        // End-to-End Tests\n        await runTest("Complete Onboarding Flow") {\n            try await testCompleteOnboardingFlow()\n        }\n        \n        await runTest("Error Recovery Scenarios") {\n            try await testErrorRecoveryScenarios()\n        }\n        \n        await runTest("Data Persistence") {\n            try await testDataPersistence()\n        }\n        \n        isRunning = false\n        \n        let passedTests = testResults.filter { $0.passed }.count\n        let totalTests = testResults.count\n        let successRate = Double(passedTests) / Double(totalTests) * 100\n        \n        print("🎯 Integration Tests Complete: \\(passedTests)/\\(totalTests) passed (\\(String(format: "%.1f", successRate))%)")\n    }\n    \n    private func runTest(_ testName: String, test: () async throws -> Void) async {\n        currentTest = testName\n        let startTime = Date()\n        \n        do {\n            try await test()\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: true,\n                duration: duration,\n                error: nil,\n                timestamp: Date()\n            ))\n            print("✅ \\(testName) - PASSED (\\(String(format: "%.2f", duration))s)")\n        } catch {\n            let duration = Date().timeIntervalSince(startTime)\n            testResults.append(TestResult(\n                testName: testName,\n                passed: false,\n                duration: duration,\n                error: error.localizedDescription,\n                timestamp: Date()\n            ))\n            print("❌ \\(testName) - FAILED: \\(error.localizedDescription)")\n        }\n    }\n    \n    // MARK: - Backend Service Tests\n    \n    private func testBackendServiceInitialization() async throws {\n        // Test service initialization\n        let service = OnboardingService.shared\n        let templates = await service.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.backendServiceFailed("Goal templates empty")\n        }\n        \n        // Test popular artists loading\n        let popularArtists = try await service.getPopularArtists()\n        \n        guard !popularArtists.isEmpty else {\n            throw TestError.backendServiceFailed("Popular artists empty")\n        }\n    }\n    \n    private func testUserCreationFlow() async throws {\n        let testUserId = UUID()\n        \n        // Initialize onboarding progress\n        let progress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        guard progress.userId == testUserId else {\n            throw TestError.dataInconsistency("User ID mismatch")\n        }\n        \n        guard progress.currentStep == "welcome" else {\n            throw TestError.dataInconsistency("Initial step should be welcome")\n        }\n    }\n    \n    private func testArtistLoadingAndSearch() async throws {\n        // Test popular artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard !popularArtists.isEmpty else {\n            throw TestError.dataEmpty("No popular artists loaded")\n        }\n        \n        // Test trending artists\n        let trendingArtists = try await onboardingService.getTrendingArtists()\n        guard !trendingArtists.isEmpty else {\n            throw TestError.dataEmpty("No trending artists loaded")\n        }\n        \n        // Test search functionality\n        let searchResults = try await onboardingService.searchArtists(query: "BTS")\n        guard !searchResults.isEmpty else {\n            throw TestError.searchFailed("BTS search returned no results")\n        }\n    }\n    \n    private func testGoalTemplatesLoading() async throws {\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard !templates.isEmpty else {\n            throw TestError.dataEmpty("No goal templates loaded")\n        }\n        \n        // Test template categories\n        let categories = Set(templates.map { $0.category })\n        let expectedCategories: Set<GoalCategory> = [.concert, .album, .merchandise, .fanmeet, .other]\n        \n        guard categories.isSuperset(of: expectedCategories) else {\n            throw TestError.dataInconsistency("Missing expected goal categories")\n        }\n        \n        // Test popular goals\n        let popularGoals = templates.filter { $0.isPopular }\n        guard !popularGoals.isEmpty else {\n            throw TestError.dataInconsistency("No popular goals marked")\n        }\n    }\n    \n    private func testOnboardingProgressTracking() async throws {\n        let testUserId = UUID()\n        \n        // Initialize progress\n        _ = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update to next step\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "intro")\n        \n        // Verify progress\n        let progress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        guard progress.currentStep == "intro" else {\n            throw TestError.dataInconsistency("Step not updated correctly")\n        }\n        \n        guard progress.completedSteps.contains("welcome") else {\n            throw TestError.dataInconsistency("Previous step not marked as completed")\n        }\n    }\n    \n    // MARK: - UI Integration Tests\n    \n    private func testOnboardingDataValidation() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test empty name validation\n        let nameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard nameError != nil else {\n            throw TestError.validationFailed("Empty name should fail validation")\n        }\n        \n        // Test valid name\n        onboardingData.name = "Test User"\n        let validNameError = OnboardingValidation.validateStep(.name, data: onboardingData)\n        guard validNameError == nil else {\n            throw TestError.validationFailed("Valid name should pass validation")\n        }\n        \n        // Test budget validation\n        onboardingData.monthlyBudget = 25.0 // Below minimum\n        let budgetError = OnboardingValidation.validateStep(.budget, data: onboardingData)\n        guard budgetError != nil else {\n            throw TestError.validationFailed("Low budget should fail validation")\n        }\n    }\n    \n    private func testArtistSelectionIntegration() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test artist selection\n        let popularArtists = try await onboardingService.getPopularArtists()\n        guard let firstArtist = popularArtists.first else {\n            throw TestError.dataEmpty("No artists available for selection")\n        }\n        \n        // Test toggle functionality\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist selection toggle failed")\n        }\n        \n        // Test deselection\n        onboardingData.toggleArtist(firstArtist.artist)\n        guard !onboardingData.isArtistSelected(firstArtist.artist) else {\n            throw TestError.uiFunctionality("Artist deselection toggle failed")\n        }\n    }\n    \n    private func testGoalSetupIntegration() async throws {\n        let onboardingData = OnboardingData()\n        let templates = await onboardingService.getGoalTemplates()\n        \n        guard let firstGoal = templates.first else {\n            throw TestError.dataEmpty("No goal templates available")\n        }\n        \n        // Test goal selection\n        onboardingData.toggleGoal(firstGoal)\n        guard onboardingData.isGoalSelected(firstGoal) else {\n            throw TestError.uiFunctionality("Goal selection toggle failed")\n        }\n        \n        // Test custom amount setting\n        let customAmount = 500.0\n        onboardingData.setCustomAmount(for: firstGoal.id, amount: customAmount)\n        \n        guard onboardingData.getAmount(for: firstGoal) == customAmount else {\n            throw TestError.uiFunctionality("Custom goal amount setting failed")\n        }\n    }\n    \n    private func testPermissionHandling() async throws {\n        let onboardingData = OnboardingData()\n        \n        // Test preferences initialization\n        let defaultPrefs = UserPreferences.default\n        guard defaultPrefs.notificationsEnabled else {\n            throw TestError.configurationError("Default notifications should be enabled")\n        }\n        \n        // Test preference updates\n        onboardingData.preferences.concertNotifications = false\n        guard !onboardingData.preferences.concertNotifications else {\n            throw TestError.uiFunctionality("Preference update failed")\n        }\n    }\n    \n    // MARK: - End-to-End Tests\n    \n    private func testCompleteOnboardingFlow() async throws {\n        let testUserId = UUID()\n        let onboardingData = OnboardingData()\n        \n        // Setup test data\n        onboardingData.name = "Integration Test User"\n        onboardingData.monthlyBudget = 300.0\n        \n        // Add artists\n        let popularArtists = try await onboardingService.getPopularArtists()\n        if let firstArtist = popularArtists.first {\n            onboardingData.selectedArtists = [firstArtist.artist]\n        }\n        \n        // Add goals\n        let templates = await onboardingService.getGoalTemplates()\n        if let firstGoal = templates.first {\n            onboardingData.selectedGoals = [firstGoal]\n        }\n        \n        // Complete onboarding\n        try await onboardingService.completeOnboarding(\n            for: testUserId,\n            name: onboardingData.name,\n            monthlyBudget: onboardingData.monthlyBudget,\n            selectedArtists: onboardingData.selectedArtists,\n            selectedGoals: onboardingData.selectedGoals,\n            customGoalAmounts: onboardingData.customGoalAmounts,\n            preferences: onboardingData.preferences\n        )\n        \n        // Verify completion\n        let isCompleted = try await onboardingService.isOnboardingCompleted(for: testUserId)\n        guard isCompleted else {\n            throw TestError.flowIncomplete("Onboarding not marked as completed")\n        }\n    }\n    \n    private func testErrorRecoveryScenarios() async throws {\n        // Test network error handling\n        let networkError = OnboardingError.networkError("Test network error")\n        \n        guard networkError.isRecoverable else {\n            throw TestError.errorHandling("Network errors should be recoverable")\n        }\n        \n        // Test validation error\n        let validationError = OnboardingError.validationError("name")\n        \n        guard validationError.isRecoverable else {\n            throw TestError.errorHandling("Validation errors should be recoverable")\n        }\n        \n        // Test error queue functionality\n        errorHandler.clearAllErrors()\n        errorHandler.handle(networkError, step: .name)\n        errorHandler.handle(validationError, step: .budget)\n        \n        guard errorHandler.errorQueue.count == 1 else {\n            throw TestError.errorHandling("Error queue not working correctly")\n        }\n    }\n    \n    private func testDataPersistence() async throws {\n        let testUserId = UUID()\n        \n        // Test progress persistence\n        let initialProgress = try await onboardingService.initializeOnboardingProgress(for: testUserId)\n        \n        // Update progress\n        try await onboardingService.updateOnboardingStep(userId: testUserId, currentStep: "budget")\n        \n        // Retrieve and verify\n        let retrievedProgress = try await onboardingService.getOnboardingProgress(for: testUserId)\n        \n        guard retrievedProgress.currentStep == "budget" else {\n            throw TestError.persistenceError("Progress not persisted correctly")\n        }\n        \n        // Test user preferences persistence\n        let preferences = UserPreferences.default\n        try await onboardingService.saveUserPreferences(userId: testUserId, preferences: preferences)\n        \n        let retrievedPreferences = try await onboardingService.getUserPreferences(userId: testUserId)\n        \n        guard retrievedPreferences.notificationsEnabled == preferences.notificationsEnabled else {\n            throw TestError.persistenceError("Preferences not persisted correctly")\n        }\n    }\n}\n\n// MARK: - Test Errors\nenum TestError: LocalizedError {\n    case backendServiceFailed(String)\n    case dataInconsistency(String)\n    case dataEmpty(String)\n    case searchFailed(String)\n    case validationFailed(String)\n    case uiFunctionality(String)\n    case configurationError(String)\n    case flowIncomplete(String)\n    case errorHandling(String)\n    case persistenceError(String)\n    \n    var errorDescription: String? {\n        switch self {\n        case .backendServiceFailed(let message):\n            return "Backend service failed: \\(message)"\n        case .dataInconsistency(let message):\n            return "Data inconsistency: \\(message)"\n        case .dataEmpty(let message):\n            return "Data empty: \\(message)"\n        case .searchFailed(let message):\n            return "Search failed: \\(message)"\n        case .validationFailed(let message):\n            return "Validation failed: \\(message)"\n        case .uiFunctionality(let message):\n            return "UI functionality failed: \\(message)"\n        case .configurationError(let message):\n            return "Configuration error: \\(message)"\n        case .flowIncomplete(let message):\n            return "Flow incomplete: \\(message)"\n        case .errorHandling(let message):\n            return "Error handling failed: \\(message)"\n        case .persistenceError(let message):\n            return "Persistence error: \\(message)"\n        }\n    }\n}\n\n// MARK: - Test Results View\nstruct OnboardingTestResultsView: View {\n    @StateObject private var testSuite = OnboardingIntegrationTests()\n    \n    var body: some View {\n        NavigationView {\n            VStack(spacing: 0) {\n                // Header with run button\n                VStack(spacing: 16) {\n                    Text("Onboarding Integration Tests")\n                        .font(.title2)\n                        .fontWeight(.semibold)\n                    \n                    if testSuite.isRunning {\n                        VStack(spacing: 8) {\n                            ProgressView()\n                                .progressViewStyle(CircularProgressViewStyle(tint: .blue))\n                            Text("Running: \\(testSuite.currentTest)")\n                                .font(.caption)\n                                .foregroundColor(.secondary)\n                        }\n                    } else {\n                        Button("Run All Tests") {\n                            Task {\n                                await testSuite.runAllTests()\n                            }\n                        }\n                        .buttonStyle(.borderedProminent)\n                        .disabled(testSuite.isRunning)\n                    }\n                }\n                .padding()\n                .background(.regularMaterial)\n                \n                // Test results\n                if !testSuite.testResults.isEmpty {\n                    List(testSuite.testResults, id: \\.timestamp) { result in\n                        TestResultRow(result: result)\n                    }\n                } else {\n                    Spacer()\n                    Text("No test results yet")\n                        .foregroundColor(.secondary)\n                    Spacer()\n                }\n            }\n            .navigationBarHidden(true)\n        }\n    }\n}\n\nstruct TestResultRow: View {\n    let result: OnboardingIntegrationTests.TestResult\n    \n    var body: some View {\n        HStack {\n            // Status icon\n            Image(systemName: result.passed ? "checkmark.circle.fill" : "xmark.circle.fill")\n                .foregroundColor(result.passed ? .green : .red)\n            \n            // Test info\n            VStack(alignment: .leading, spacing: 2) {\n                Text(result.testName)\n                    .font(.headline)\n                \n                HStack {\n                    Text("\\(String(format: "%.2f", result.duration))s")\n                        .font(.caption)\n                        .foregroundColor(.secondary)\n                    \n                    if let error = result.error {\n                        Text("• \\(error)")\n                            .font(.caption)\n                            .foregroundColor(.red)\n                            .lineLimit(1)\n                    }\n                }\n            }\n            \n            Spacer()\n        }\n        .padding(.vertical, 4)\n    }\n}\n\n// MARK: - Manual Test Helper\nstruct OnboardingManualTestHelper: View {\n    @State private var showingTests = false\n    \n    var body: some View {\n        VStack {\n            Button("Show Integration Tests") {\n                showingTests = true\n            }\n            .sheet(isPresented: $showingTests) {\n                OnboardingTestResultsView()\n            }\n        }\n    }\n}\n\n// MARK: - Test Utilities\nstruct TestUtilities {\n    static func generateMockOnboardingData() -> OnboardingData {\n        let data = OnboardingData()\n        data.name = "Test User"\n        data.monthlyBudget = 300.0\n        return data\n    }\n    \n    static func clearTestData() {\n        // Clear UserDefaults test data\n        let testKeys = ["userName", "monthlyBudget", "hasCompletedOnboarding"]\n        testKeys.forEach { key in\n            UserDefaults.standard.removeObject(forKey: key)\n        }\n        \n        // Clear any test user preferences\n        let keysToCheck = UserDefaults.standard.dictionaryRepresentation().keys\n        keysToCheck.forEach { key in\n            if key.contains("onboarding_progress_") || key.contains("user_preferences_") {\n                UserDefaults.standard.removeObject(forKey: key)\n            }\n        }\n    }\n}\n\n#Preview {\n    OnboardingTestResultsView()\n}"
/Users/momow1127/Desktop/Desktop/Portfolio/My Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift:14:52: note: to match this opening '{'
class OnboardingIntegrationTests: ObservableObject {
                                                   ^

SwiftCompile normal arm64 Compiling\ Config.swift,\ Double+Extensions.swift,\ IntroCardsView.swift,\ OnboardingModels.swift,\ RevenueCatManager.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatManager.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Config.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Double+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IntroCardsView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatManager.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ OnboardingContainer.swift,\ PremiumGate.swift,\ ValidationService.swift,\ DashboardComponents.swift,\ EnhancedPaywallView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingContainer.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/PremiumGate.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/ValidationService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/DashboardComponents.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedPaywallView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftEmitModule normal arm64 Emitting\ module\ for\ Piggy_Bong (in target 'Piggy Bong' from project 'FanPlan')

EmitSwiftModule normal arm64 (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ Secrets.swift,\ BudgetSelectionView.swift,\ GoalSetupView.swift,\ IdolUpdateModels.swift,\ QuickAddView.swift,\ AuthenticationService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationService.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Secrets.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/BudgetSelectionView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalSetupView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolUpdateModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/QuickAddView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ Budget.swift,\ IdolNewsFeedView.swift,\ GoalProgressSheet.swift,\ Purchase.swift,\ FanHomeDashboardView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift (in target 'Piggy Bong' from project 'FanPlan')
SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Budget.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/IdolNewsFeedView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/GoalProgressSheet.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Purchase.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanHomeDashboardView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 Compiling\ FanExperienceModels.swift,\ NameInputView.swift,\ User.swift,\ EnhancedOnboardingView.swift,\ LoadingView.swift,\ OnboardingService.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/NameInputView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedOnboardingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift (in target 'Piggy Bong' from project 'FanPlan')

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanExperienceModels.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/NameInputView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/User.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/EnhancedOnboardingView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/LoadingView.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingService.swift (in target 'Piggy Bong' from project 'FanPlan')
    cd /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main
    

note: Disabling hardened runtime with ad-hoc codesigning. (in target 'Piggy Bong' from project 'FanPlan')
** BUILD FAILED **


The following build commands failed:
	SwiftCompile normal arm64 Compiling\ OnboardingIntegrationTests.swift,\ RevenueCatConfig.swift,\ AuthenticationView.swift,\ Date+Extensions.swift,\ FanPlanApp.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/OnboardingIntegrationTests.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/RevenueCatConfig.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/AuthenticationView.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/Date+Extensions.swift (in target 'Piggy Bong' from project 'FanPlan')
	SwiftCompile normal arm64 /Users/momow1127/Desktop/Desktop/Portfolio/My\ Project/AI/PiggyBong-main/FanPlan/FanPlanApp.swift (in target 'Piggy Bong' from project 'FanPlan')
	Building project FanPlan with scheme Piggy Bong
(7 failures)
