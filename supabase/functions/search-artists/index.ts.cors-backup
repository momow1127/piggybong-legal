import { serve } from "https://deno.land/std@0.224.0/http/server.ts"
import { corsHeaders } from '../_shared/cors.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, GET, OPTIONS, PUT, DELETE'
};


const TICKETMASTER_API_KEY = Deno.env.get('TICKETMASTER_API_KEY')

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    if (!TICKETMASTER_API_KEY) {
      throw new Error('Ticketmaster API key not configured')
    }

    const { query, limit } = await req.json()

    if (!query || query.trim().length === 0) {
      throw new Error('Search query is required')
    }

    // Search for attractions (artists)
    const params = new URLSearchParams({
      apikey: TICKETMASTER_API_KEY,
      keyword: query.trim(),
      size: (limit || 20).toString()
    })

    const url = `https://app.ticketmaster.com/discovery/v2/attractions.json?${params}`

    const response = await fetch(url)
    
    if (!response.ok) {
      throw new Error(`Ticketmaster API error: ${response.status}`)
    }

    const data = await response.json()

    // Transform data to match app's expected format
    const artists = data._embedded?.attractions?.map((attraction: any) => ({
      id: attraction.id,
      name: attraction.name,
      image_url: attraction.images?.[0]?.url,
      genres: attraction.classifications?.map((c: any) => c.genre?.name).filter(Boolean) || []
    })) || []

    return new Response(
      JSON.stringify({ artists }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )

  } catch (error) {
    console.error('Search artists error:', error)
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Internal server error',
        artists: []
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    )
  }
})