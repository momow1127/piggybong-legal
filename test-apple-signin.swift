import Foundation

print("üçé APPLE SIGN-IN CONFIGURATION CHECK")
print(String(repeating: "=", count: 50))

// 1. Check Info.plist configuration
if let plistPath = Bundle.main.path(forResource: "Info", ofType: "plist"),
   let plistData = FileManager.default.contents(atPath: plistPath),
   let plist = try? PropertyListSerialization.propertyList(from: plistData, options: [], format: nil) as? [String: Any] {

    // Check Apple Client ID
    if let appleClientId = plist["APPLE_CLIENT_ID"] as? String {
        print("‚úÖ APPLE_CLIENT_ID: \(appleClientId)")
        if appleClientId == "carmenwong.PiggyBong.auth" {
            print("‚úÖ Apple Client ID format is correct")
        } else {
            print("‚ö†Ô∏è  Apple Client ID should be: carmenwong.PiggyBong.auth")
        }
    } else {
        print("‚ùå APPLE_CLIENT_ID not found in Info.plist")
    }

    // Check Bundle Identifier
    if let bundleId = plist["CFBundleIdentifier"] as? String {
        print("‚úÖ Bundle Identifier: \(bundleId)")
        if bundleId == "carmenwong.PiggyBong" {
            print("‚úÖ Bundle ID matches expected format")
        }
    }

    // Check URL Schemes for Apple Sign-In
    if let urlTypes = plist["CFBundleURLTypes"] as? [[String: Any]] {
        var foundAppleScheme = false

        for urlType in urlTypes {
            if let schemes = urlType["CFBundleURLSchemes"] as? [String] {
                for scheme in schemes {
                    if scheme.contains("carmenwong.PiggyBong") {
                        print("‚úÖ Found Apple URL scheme: \(scheme)")
                        foundAppleScheme = true
                    }
                }
            }
        }

        if !foundAppleScheme {
            print("‚ö†Ô∏è  Apple Sign-In URL scheme not found")
        }
    }

} else {
    print("‚ùå Could not load Info.plist")
}

print("\n" + String(repeating: "=", count: 50))
print("üîß APPLE SIGN-IN SETUP REQUIREMENTS:")
print(String(repeating: "=", count: 50))

print("""

üìã CHECKLIST FOR APPLE SIGN-IN:

1Ô∏è‚É£  XCODE PROJECT SETTINGS:
   ‚ñ° Open your project in Xcode
   ‚ñ° Select your target (Piggy Bong)
   ‚ñ° Go to "Signing & Capabilities" tab
   ‚ñ° Click "+ Capability"
   ‚ñ° Add "Sign In with Apple"

2Ô∏è‚É£  APPLE DEVELOPER ACCOUNT:
   ‚ñ° Go to developer.apple.com
   ‚ñ° Navigate to "Certificates, Identifiers & Profiles"
   ‚ñ° Select your App ID (carmenwong.PiggyBong)
   ‚ñ° Enable "Sign In with Apple" capability
   ‚ñ° Configure if needed and save

3Ô∏è‚É£  SUPABASE DASHBOARD SETUP:
   ‚ñ° Go to Supabase Dashboard > Authentication > Providers
   ‚ñ° Enable "Apple" provider
   ‚ñ° Client ID: carmenwong.PiggyBong.auth
   ‚ñ° Secret: (Generated by Supabase automatically)
   ‚ñ° Redirect URL: https://lxnenbhkmdvjsmnripax.supabase.co/auth/v1/callback

4Ô∏è‚É£  TESTING:
   ‚ñ° Apple Sign-In ONLY works on:
     - Physical iOS device (iPhone/iPad)
     - NOT in iOS Simulator
   ‚ñ° Must be signed in to iCloud on the device
   ‚ñ° Must have two-factor authentication enabled

‚ö†Ô∏è  IMPORTANT NOTES:
   ‚Ä¢ Apple Sign-In will NOT work in the iOS Simulator
   ‚Ä¢ You MUST test on a real device
   ‚Ä¢ The device must be signed into iCloud
   ‚Ä¢ Your Apple Developer account must be valid

""")

print(String(repeating: "=", count: 50))
print("‚ú® Apple Sign-In configuration check complete!")
print(String(repeating: "=", count: 50))